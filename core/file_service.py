"""
File service for Modsee.
"""

import logging
import json
import os
from pathlib import Path
from typing import Dict, Any, Optional

from .component import ServiceComponent

logger = logging.getLogger('modsee.core.file_service')


class FileService(ServiceComponent):
    """
    Service for file operations.
    """
    
    FILE_EXTENSION = ".msee"
    
    def __init__(self):
        """
        Initialize the file service.
        """
        super().__init__("FileService")
        self._recent_files: Dict[str, str] = {}
        self._max_recent_files = 10
        
        logger.info("FileService initialized")
    
    def load_project(self, file_path: Path) -> Optional[Dict[str, Any]]:
        """
        Load a project from a file.
        
        Args:
            file_path: The path to the project file.
            
        Returns:
            The loaded project data, or None if loading failed.
        """
        if not file_path.exists():
            logger.error(f"Project file not found: {file_path}")
            return None
        
        try:
            with open(file_path, 'r') as f:
                data = json.load(f)
            
            # Add to recent files
            self.add_recent_file(file_path)
            
            logger.info(f"Loaded project from: {file_path}")
            return data
        
        except Exception as e:
            logger.error(f"Error loading project: {e}")
            return None
    
    def save_project(self, file_path: Path, data: Dict[str, Any]) -> bool:
        """
        Save a project to a file.
        
        Args:
            file_path: The path to save the project to.
            data: The project data to save.
            
        Returns:
            True if successful, False otherwise.
        """
        try:
            # Ensure directory exists
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Add file extension if not present
            if not file_path.suffix:
                file_path = file_path.with_suffix(self.FILE_EXTENSION)
            
            with open(file_path, 'w') as f:
                json.dump(data, f, indent=2)
            
            # Add to recent files
            self.add_recent_file(file_path)
            
            logger.info(f"Saved project to: {file_path}")
            return True
        
        except Exception as e:
            logger.error(f"Error saving project: {e}")
            return False
    
    def add_recent_file(self, file_path: Path) -> None:
        """
        Add a file to the recent files list.
        
        Args:
            file_path: The path to the file.
        """
        path_str = str(file_path.absolute())
        
        # Remove if already in the list
        self._recent_files.pop(path_str, None)
        
        # Add to the beginning
        self._recent_files[path_str] = file_path.name
        
        # Trim list if needed
        if len(self._recent_files) > self._max_recent_files:
            # Remove oldest (first added) file
            oldest = next(iter(self._recent_files))
            self._recent_files.pop(oldest)
        
        logger.debug(f"Added to recent files: {file_path}")
    
    def get_recent_files(self) -> Dict[str, str]:
        """
        Get the list of recent files.
        
        Returns:
            Dictionary of recent files, with paths as keys and filenames as values.
        """
        return self._recent_files.copy()
    
    def clear_recent_files(self) -> None:
        """
        Clear the list of recent files.
        """
        self._recent_files.clear()
        logger.debug("Cleared recent files")
    
    def export_to_opensees_tcl(self, file_path: Path, data: Dict[str, Any]) -> bool:
        """
        Export a model to OpenSees TCL format.
        
        Args:
            file_path: The path to save the TCL file to.
            data: The model data to export.
            
        Returns:
            True if successful, False otherwise.
        """
        try:
            # Ensure directory exists
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Add file extension if not present
            if not file_path.suffix:
                file_path = file_path.with_suffix(".tcl")
            
            # TODO: Implement actual TCL conversion logic
            with open(file_path, 'w') as f:
                f.write("# OpenSees TCL script generated by Modsee\n\n")
                f.write("# TODO: Implement actual TCL conversion\n")
            
            logger.info(f"Exported OpenSees TCL script to: {file_path}")
            return True
        
        except Exception as e:
            logger.error(f"Error exporting to OpenSees TCL: {e}")
            return False
    
    def export_to_openseespy(self, file_path: Path, data: Dict[str, Any]) -> bool:
        """
        Export a model to OpenSeesPy format.
        
        Args:
            file_path: The path to save the Python file to.
            data: The model data to export.
            
        Returns:
            True if successful, False otherwise.
        """
        try:
            # Ensure directory exists
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Add file extension if not present
            if not file_path.suffix:
                file_path = file_path.with_suffix(".py")
            
            # TODO: Implement actual OpenSeesPy conversion logic
            with open(file_path, 'w') as f:
                f.write("# OpenSeesPy script generated by Modsee\n\n")
                f.write("import openseespy.opensees as ops\n\n")
                f.write("# TODO: Implement actual OpenSeesPy conversion\n")
            
            logger.info(f"Exported OpenSeesPy script to: {file_path}")
            return True
        
        except Exception as e:
            logger.error(f"Error exporting to OpenSeesPy: {e}")
            return False 